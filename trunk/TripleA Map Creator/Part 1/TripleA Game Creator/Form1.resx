<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="button4.Text" xml:space="preserve">
    <value>                              Congratulations!! You're about halfway done!!

Now all you have to do is open Part 2 of the program and finish your map. You should find Part 2 in the same folder as this program. 

                                          :D :D Good Luck!! :D :D

</value>
  </data>
  <data name="button5.Text" xml:space="preserve">
    <value>Before you use this program, make sure:

A. The map's folder contains:
    1. A complete image of the map
    2. A folder named 'units' containing all the extra images for the units
    3. A folder named 'flags' containing all the extra images for the flags

Note: All of the images must be in .png format

Note: When creating the map image, remember that the borders between territories must be completely black, the inside of land territories must be completely white, and the inside of sea territories must be colored.</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="button14.Text" xml:space="preserve">
    <value>                              Instructions for using the 'Center Picker' 

When a window opens that asks you to select a map, select the image file for your map.

When it asks for a polygon file, click "Cancel".

When it displays the map, click on the center of every territory and name it by entering its name in the window that opens and clicking 'Yes' when it asks for confirmation.

When you've finished, save the file by clicking "File", "Save Centers", then select the map directory and click save.</value>
  </data>
  <data name="button6.Text" xml:space="preserve">
    <value>                              Instructions for using the 'Polygon Grabber'

When a window opens that asks you to select a map, select the image file for your map.

When it asks for a centers file, select the centers file for your map.

When it displays the map, double-right-click on every territory and confirm it by pressing the space bar.

When you've finished, save the file by clicking "File", "Save Polygons", then select the map directory and click save.


Note: If a territory has any black jut-outs in the territory outline (A straight line sticking out of the outline into the territory), the polygon grabber will report an error. To fix this,open the map's image file, and remove all the jut-outs from every territory that the Polygon Grabber fails to grab.  </value>
  </data>
  <data name="button9.Text" xml:space="preserve">
    <value>                              Instructions for using the 'Placement Picker'

When a window opens that asks you to select a map, select the image file for your map.

When it asks for a polygons file, select the polygons file for your map.

When it displays the map, left-click on every territory to select it and ctrl-click on every place within the territory where you want a placement added.

When you've finished, save the file by clicking "File", "Save Placements", then select the map directory and click save.</value>
  </data>
  <data name="button15.Text" xml:space="preserve">
    <value>                         Instructions for using the 'Auto-Placement Finder'

When a window opens that asks you to enter the map name, type in 'temp'.

When a window opens that asks where to save 'place.txt', select the map's folder.</value>
  </data>
  <data name="button17.Text" xml:space="preserve">
    <value>                         Instructions for using the 'Tile Image Breaker'

When a window opens that says 'Where to save tile images', make a new folder named 'baseTiles' in your map's folder and select it.

When a window opens that asks you to select the map, select the map image file.
</value>
  </data>
  <data name="button19.Text" xml:space="preserve">
    <value>                         Instructions for using the 'Relief Image Breaker'

When a window opens that says 'Where to save relief images', go to the TripleA game's 'maps' folder, go to the 'temp' folder, select the 'reliefTiles' folder.

When a window opens that asks you to select the map, select the map image file.

When a window opens that asks you if it should process Sea Zones only, enter Y for yes, or N for no.
</value>
  </data>
  <data name="button21.Text" xml:space="preserve">
    <value>                         Instructions for using the 'Image Shrinker'

When a window opens that asks you to select the large image, select the map image file.

When a window opens that asks for the scale, enter the amount to scale down the image.
</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
</root>